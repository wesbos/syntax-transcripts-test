1
00:00:01,320 --> 00:00:10,560
Unknown: You're listening to syntax the podcast with the tastiest web development treats out there. strap yourself in and get ready. Here is Scott, ski and West boss. 

2
00:00:10,590 --> 00:00:23,910
Wes Bos: Welcome to syntax. This is the podcast with the tastiest web development treats out there. My name is Wes Bos. I'm a full stack developer from Canada and with me as always is Mr. Scott to linsky. How you doing today, Scott? 

3
00:00:23,940 --> 00:01:16,050
Scott Tolinski: Hey, I'm doing good. Just taking out just hanging out. Landon had his first trip to the urgent care he slipped and fell and sliced open his chin and we were Oh yeah, it was super bad at where I was very convinced he was going to need stitches. And then they did surgical glue. But man, he's a little champion. He did not even like he didn't even bat an eye. They were you know, pulling open his cut and whatever is fantastic. Oh, you're off? Yeah, that was the ER look look like right now? Well, it was well, we went to an urgent care, which isn't technically not the same thing. It's sort of just like a little shack. It was chill. There was nobody there. They had us all in there, our own little section. And Landon wore his incredible hulk mask. And we all just sort of hung out. It was fun. I mean, definitely, like not not bad at all. I was a little concerned going in, but it was it was all good.

4
00:01:16,370 --> 00:03:47,220
Wes Bos: That's good. All right. Today we are sponsored by two awesome companies. First one is Sanity, which is a structure content, CMS and century, which does all of your error and exception tracking. We'll talk about them partway through the episode. So today, today, we've got a potluck going which we I was looking at the thing that we used to do potluck once a month, and it's been five weeks since we've done a potluck. So long, long overdue. And these are just questions that you submit, and we will answer them for you. If you have a question you'd like to get on the show, go to syntax.fm. In the top right hand corner, there is a button that says ask a follow up question. Go ahead and pop it in the box. And we will probably answer it on the show. So let's grab the first one. The first one is from Ryan Hayes syntax, boys, you've talked a couple times in the past about security concerns around target equals underscore blank. Just a quick reference Episode 269, we dove deep into why target underscore blank could be a possible security issue. But mostly isn't anymore because the browser's have sort of fixed that but it says you mentioned how adding REL no opener and or REL no refer can secure this functionality. But what's to stop a savvy person from going into dev tools and deleting these attributes or for clicking a link? Does this defeat the entire purpose? Or for what surely browsers have thought of this? And it's not so easy to hack? So the question is okay, like putting no open or no refer on a link fixes the security hole? Like what if somebody takes it off? That's what's referred to as a self access self cross site scripting, meaning that the user has to intentionally go and disable it like, like, what if you take your parachute off when you jump out of a plane? Right? Like these are things that the user would have to intentionally do themselves? And then there's also like, you have to be very technical. So like, like, why would a technical user even even do that? The reason why I picked this question is because the whole idea of self access can happen. Like if you go to facebook.com, and open up the dev tools, you you're greeted with this immediate, huge stop. This is a browser feature intended for developers, if someone told you to copy paste something here to enable a Facebook feature or hack into someone's account, it is a scam and will give them access to your Facebook account. So it's the same thing as using dev tools. You're in a privileged environment. And if you intentionally shoot yourself in the foot, then yes, pretty shoot, but I don't I don't think that's actually a issue. Yeah.

5
00:03:47,630 --> 00:03:55,259
Unknown: Next up is going to be a question from falck. He asks, first, thanks for the amazing podcast. I've learned a lot and gave me lots of smiles. Thank

6
00:03:55,259 --> 00:06:40,890
Wes Bos: you for the question. Why did you not mention stencil stencil .js dot com When talking about web components on your last potluck, and I presume you had not heard of it. So I'm going to stop you right there. I hadn't heard of Central but for some reason, it just popped in my head when we were doing this. In fact, I have taken a decent look at it. The cool thing. For those of you who don't know stencil is a neat library stencil j s calm which allows you to do web components, stencils like sort of their whole it's by ionic but their whole deal is that they're they're advertising is like you can use stencil components within react within view within spelt. And it plays nice with all of them. To me, that's a pretty big selling point. Because if you're looking to ever build a tool that allows people to do the same thing as something else, but you want them to use yours, then having like a clear migration path is definitely like a good, good thing to have built in. In fact, I think that's probably a reason why it's so hard for new JavaScript frameworks to take off in some ways because well, people are already using you know, I'm already using react. So why would I ever think about putting something else in my codebase, because you know that that transition, or maybe the interplay would be a little bit difficult. So I pasted some code here in the show notes. That is what a stencil component looks like. And it's really pretty neat. It uses decorators, and it looks a lot like a, it looks like a lot like a react component. Now, one of the neat things about stencil is that it uses JSX. So those of you coming from a react should feel pretty at home with it. Again, it's a decent little framework here. And definitely something to keep your eye on especially as web components become more and more of a use thing. I think things like stencil will be more common to see in the wild. Either way, I think stencil is awesome. And it definitely was on my radar. But when preparing these shows, it's it's not always easy to remember everything all the time, especially when you're when you're someone like me with a memory that is not perfect. So that that's the scoop on stencil, I highly recommend if those sound like things that you're interested in, and you're interested in web components, checking it out. I'm gonna let you grab the next question cuz I've just laughing Yeah, looking at it. This next question I added here is HTTPS code, whatever forward slash forward slash www.syntax.fm supposed to now work, I get an error message for four not found? Yes, we intentionally built the website to not work. And if you arrived on it, and it was not working, then that was to be expected. In fact, you have actually hit the real website, which is supposed to be designed to be a 404 page and not have any useful information. Definitely, yes. We built it that way. That's why

7
00:06:41,010 --> 00:07:22,740
Unknown: it's not supposed to work. That's That's funny. Someone on Twitter yesterday, I was talking about my wife cam. And and someone was like, Oh, they care more about Google Analytics, then taking our money. Oh, yeah. Oh, yes. I really care more about Yeah. Like there was like a, like an error. And they couldn't pop up in the BI modal because something new with Google Analytics broke it. And like, they don't care more about who Linux it's selling you the thing? It's, it's a bug and the thing broke, obviously happened. Bugs happen. So don't be snarky when when things like that happen. Yes, I know. Both sound complete, could not work and you can't see anything or click on it. Is that supposed to be that way?

8
00:07:23,070 --> 00:09:32,610
Wes Bos: Oh, no. There's some dev sweating at the same time that you're you're trying to get it to work. So just remember, there's, there's people behind these things. So next question we have here from Gabe. Hey guys wondering what advice you have for self taught switching from a totally non tech industry, nonprofit arts. In my case, where I work in a tech role, I've hustled and built a portfolio of projects. And I've learned a ton from both of your courses. But I feel in my experience is seen as less value because they don't work in traditional software slash web development environment, any tips for getting over the final hurdle and getting jobless kind of interesting. So works in a non tech industry, but in attack role, not a typical software development role. I don't think that this is that big of a deal. One thing I was thinking about the other day, how it's so cool, like Scott Scott's wearing a go cracking hat right now from the the NHL, yes, because someone who listens to the podcast saw that Scott was tweeting about it, and then they sent him a hot. And I was like, it is so cool that we always have techies inside of every single company, regardless of what type it is. So it sounds like in this case, you're like in a tech role, but probably not specifically building software and building websites. So I don't think that is not as valuable, it certainly would be your first web development role. So that's always the sort of hardest thing to do. And it sounds like you know, what you've done is you've built a portfolio of projects and, and put yourself out there and really, I think at the end of the day, you just need to keep doing that keep building stuff, keep putting projects out, keep writing blog posts, keep doing whatever it is that you feel like is a good use case of your time. And then eventually, you're gonna get someone's gonna take a chance on you and bring you on for their first web development job. So honestly, I think companies are often looking for these types of people because they're hidden gems, right? Yeah, they're the people that aren't web developers yet, but are probably could be easily skilled up and trained, especially because they have like a whole host of different types of professional experience that come in handy. I

9
00:09:32,610 --> 00:10:18,919
Scott Tolinski: mean, working in a professional role in any regard, requires a lot of different skills that are not just Can you type key and get code to work. You know, being a professional in any regard requires you to have those experiences. So I think like you said, These people can be totally hidden gems, and this might be a good opportunity for you to explain some of these things in a cover letter. Like typically when you're applying for jobs, it might be a good opportunity. If you say all right here is what could be a perceived weakness, but just like mmm and a model, you can come out and get in front of it. You say, Yeah, that's right. I haven't done a web developer development specific role anymore. Here's why. That's great. Unless I assume you haven't seen that movie because I thought that was a funny joke. And you're not

10
00:10:18,919 --> 00:10:20,399
Unknown: know what movie is?

11
00:10:21,270 --> 00:11:06,630
Wes Bos: Eight Mile a mile? I don't think so. No, that's the one with m&m right. That's the water that bit of Yes. Yeah, no, I need I need to put that on. my list is growing. Your list you don't need to know. Someone, please make me a list of like, 10 movies that I need to see, to just get me into the fold of Scott's jokes. One time we had a friend that was this is unrelated, but somewhat related. We had a friend who like had a heart to heart with another friend and was like, 100% serious. They're like, I feel like you're not laughing at my jokes. We've always been like cracking up. So anytime, like I say something that I think's funny and Courtney's like not laughing and to be like, Courtney, I feel like you're not laughing at my

12
00:11:06,630 --> 00:13:04,049
jokes. I cannot. Okay, next question is from Adam. Adam says what makes a software engineer senior. So typically, what makes someone a senior engineer by role is specifically that they've been given the opportunity to be promoted into that role. That I mean, that's really what makes someone senior. But if you're asking, what are the things that somebody as a senior developer does, that's different, I would say these people have a greater handle on what it takes to manage a team, they have a greater handle on what it takes to pick software responsibly. Some people pick software, when they're when they're creating a project, or they're deciding things. And they'll just pick it based on whatever's hot, whatever's new, whatever is cool, whatever, without understanding what the implications for that would be for the entire team, the future of the project, yada, yada, yada, the bottom line, right. So what makes a senior software engineer will typically they're pretty responsible in terms of making responsible decisions for their team. They know how to manage and work with a team, they know how to talk to management, and they typically are able to express in layman's terms or non tech terms to people who are stakeholders to let why these things are important or what needs to happen, at least in my perspective, in my experience, that's what senior software engineers have done. Yeah, I also think like, another big one of a senior engineer is being able to look at an entire project and break it down into the pieces that are needed. And maybe different projects may be different servers, maybe you need a standalone back end, and then you need react app for for the web. And then maybe you can build something else for the for the iPhone app. But just being able to sort of take a step back and say like, this is how we're going to architect everything, rather than the nitty gritty of should we use hooks or something else, right?

13
00:13:04,470 --> 00:13:05,190
Unknown: Yes, right, exactly.

14
00:13:06,330 --> 00:13:49,409
Next question we have here is from Sam. Hi, guys, longtime listener, first time caller looking for advice. I have a Gatsby j. s and an Netlify client project about to launch? What's the best approach on handing over to a non technical client? Do I keep my GitHub account? And just give the client Netlify CMS login? Or do I create the client their own GitHub account? So I can that I can access for any maintenance? What do other devs do? So I think have you used us Netlify? CMS before Scott, I have is there multiple roles? Is there like multiple roles in that? Because at the end of the day now by CMS just as markdown, right, it's a GUI that sits on top of markdown. Right?

15
00:13:49,439 --> 00:17:06,900
Wes Bos: Yeah, it's a it's a markdown GUI to say that in the just swap the words around? Yeah, so nullify CMS? It does. It's an Netlify GUI. And typically, it's a pretty lightweight CMS, I had night considered using Netlify. CMS for an application that a user will touch like a non technical person will touch. Because typically I think of that is still just being like, slightly one step in front of somebody editing markdown files, right? Like the interface is nice. And it does get you a GUI and like proper little widgets for whatever you want. And those I guess that is a big jump in front of markdown file editing. But in the same regard. I don't know if I've ever considered using this for a project for non technical people. We actually actually have a netlify CMS set up for Scott tolinksi.com just in case I ever feel like it didn't do a GUI but what do other devs Do you know what this one I'm not entirely positive what other people would do because I just don't I've never necessarily considered this as being a practical option for client based projects. That said, what I would do is I would give them a login though, make sure they have their own login. I would did absolutely not have them create a GitHub account because normal people do not know that GitHub isn't? sure if I was the normal person, it would scare the life out of me seeing all that code and those green boxes, I mean, what's up with all this stuff. So I would not give them a GitHub account, I would make them have their own account, it give them training on it. So here's a low key aspect of passing off a project to a client that a lot of people tend to forget, when passing off a project to a client, you need to train your ear, dear maintainers, the people who are going to be maintaining this content and writing it, you need to train them. So if you set up a an account for them, here's what you do, you get them on a zoom call, you record the zoom call, if you're on a Mac, QuickTime has a nice little screen recorder. And you just talk them through exactly what you do. And then at the end of it, you spit them out a video file and say, oh, by the way, I recorded this talk for you. Anytime you need to go see how to update post, open video update post, there you go. So killing two birds with one stone, you give them a reference, and you get to train them at the same time. So that's what I would do, I would make sure they are trained, especially if it requires some technical aspects to it. I would assume that multiple maintainers could access the Netlify CMS but it's not something I've experienced with I know they can but I don't know what the role systems like I think like maybe this should have been like this is intentionally why I didn't use markdown in my latest course, even though we're all developers taking the course and they could all edit the markdown, the target of the courses is people that are going to be handing off these projects to non technical users. And they need you need a you need a CMS, you can log into and edit and drag and drop things and whatnot. So that's something to really think about. But for you Yeah, I would just, I would make some a secondary, I think that you do need a GitHub account to actually edit it. Because at the end of the day, when you hit Save in the Netlify CMS, it makes it get commit to the actual underlying markdown. So you probably will, even though we said don't, you probably will have to make them a GitHub account, just so they can use that as a login.

16
00:17:06,929 --> 00:17:13,550
Unknown: I think you could do different accounts. Oh, I don't I don't see why you would need like a secondary account for yourself or like a whatnot. No,

17
00:17:13,550 --> 00:17:35,040
Scott Tolinski: I mean, what I'm referring to is not like a GitHub login. I'm like double checking this right now. But I'm pretty sure you can use other types of logins. Because I know they they support different OAuth clients. As I was thinking maybe you could be like, oh, let's have a Facebook login. Right. But I clicked on their site. And there are other options are like GitHub and get lab and Bitbucket just like Yeah,

18
00:17:35,090 --> 00:17:54,180
Wes Bos: because it's Oh, yeah, it's so tightly attached to version control limits, is right. That's where there's no database or anything It is, it is version control at the end of the day, so you do need to give them that credit. Yeah, I guess that totally makes sense. No, I think about it. But off the top of my head, I was thinking, Oh, yeah, they could have a Facebook. No, that that doesn't make any sense. All right,

19
00:17:54,180 --> 00:20:15,690
next question. We have from guide, I recently blocked all cookies on my mobile browser, Google Chrome, I noticed something weird on a couple of websites that I know for a fact has been built using next j s and is not working as expected. They would load as usual after a second or so the content on the page disappeared with the error message sorry, and unexpected error has occurred. In some cases, it was printed in the site's font and with the same background color on the body. Why does blocking cookies do this to next JS website. So I actually get this sometimes on my, my own course platform, where people it's not the whole website doesn't break. But the the Vimeo embeds don't work because people turn off cookies entirely. And in order for Vimeo to embed my videos on my domain name and not have them publicly available cookies are needed for for whatever reason. So what's happening here is it's a rerender, or rehydration bug, mean that next jass will always serve up a either a server rendered on demand or a statically rendered version. And then when the browser loads, it will try to rehydrate it and rerender it on the client. And most the case you don't see anything happened because it's picking it up from HTML and moving it over to like a react application. And what's probably happening is they're trying to fetch some data from somewhere. I'm not sure exactly why cookies do this. But what happens is they're trying to fetch something, fetch some data. And because cookies are blocked, something Something has broken, likely some sort of authentication or session variable that is stored in the next day. It's probably not related to next Yes, intentionally. But it's just that the requests that it was made needs those cookies. So why does that happen? Because of that, should it still work? I say no, like cookies are part of the web. And if you turn off part of the web, then, like, I understand that there's privacy issues there and that those certain certainly should be blocked but cookies are still A major building block behind how a lot of the web works, so you can't just take them out and expect it to all work. We saw this a long time ago with people said, like, I should be able to turn off JavaScript and the whole thing should work. And like, yeah, also, yeah, no, yeah,

20
00:20:15,899 --> 00:23:27,690
I know, I was gonna say the exact same thing. That's the first thing I thought of when they when I saw this. It's like people say, Cookie bad. I don't want cookie. So I turned cookie off. And it sure yeah, okay, you can turn cookies off. But whatever you can expect the experiences to necessarily be the same, or everything to work the same way that you'd expect them to with all of the features turned on anybody's worked in server side rendering for react knows just how much fun rehydration issues can be. Yes, things are tough to troubleshoot and troff tough to develop. But I would say most likely, like you said, it's not an X JS specific thing. And I would probably reach out to the creators of that content and just say, hey, just so you know, if you turn cookies off, this thing breaks. And maybe it is a simple instance of like what you mentioned, it's like the server components coming back fine. But with cookies turned off, part of the code is breaking. Maybe there's like a variable that's expected to be there. I don't know if you check the console or something. But rehydration errors can happen there. They're not often a lot of fun to debug. But yeah, most likely not a next JS specific thing. Next question is from Scott D. Scotty, what's up Scott d? How often do you make commits, I always hear commit often, but I'm hesitant, because I feel like I may change my code later. Before I make a pull request. I really like your episode on Git fundamentals. I would love a tutorial deep dive of Git workflows, when to commit, how often should I commit, even though what I'm working on isn't complete, or I need to refactor it? What is the code review etiquette? Okay, what I would do is commit often. So really, even if you're going to change your code later, committing code is really just basically saying here is like a landmark here is a landmark of like this specific time in, in the code development. So I still commit even if the code is going to change. And with a detailed commit message, it will tell a lot about what why the file is changing and how it's changing. Now, here's a little feature. I'm not sure if this is related. But I think this could possibly be related. Because you mentioned something about code reviews. Here's a little tip. So if you're in GitHub pull requests, and you have a pull request open, you will notice that there is a little button or link underneath the reviewers. And it says still in progress question mark converted to draft. And what that does is it converts your pull request ID to a draft so that everybody knows that this thing is, is still being updated and being worked on. So that way any commits or anything that comes into this poll request in the meantime, will not be asked to be reviewed, it's just going to be listed as a commit or the changes that have happened. So if you convert your pull requests to draft it specifically not going to ask for review on that code. Yeah, I recently just found this out. And because we were having GitHub actions, issues where one of our developers was pushing stuff to a pull request, and every time he did stuff, even though he didn't want it to be pulled yet, it was a GitHub actions. And so we were getting all these all these notifications. And we were like, how do we turn this off? That's when we found the draft button.

21
00:23:29,010 --> 00:27:13,200
That's awesome. So what I did with mine is that I commit often just as Scott said, as well, after every single minor feature after every time I do something, because like I use also use Git for my own use cases where if I like if I change something about a function, I'll just commit it Why? So I can if I change it in a feature, or if I need to roll it back, I absolutely can. It just when you go to make that pull request into the master branch, often what people will do is what's called a rebase. So like, if I'm working on a feature, where I make a one thing I'm working on right now is being able to resize the list of videos beside the player. So you can make it smaller or bigger if you want to. So like that feature, if I might have 15 different commits on that, just because as I'm working through it, especially at the end of the day, it's like my, my nightmare would be my laptop gets stolen, or like I spill something or for whatever reason you lose a day or two worth of work that's worth, that's worth a lot to me. So I'll commit it and push it to my own branch, then do a rebase. So the way that it works is like let's say you have 10 commits, you just type Git rebase dash is the dash I stands for interactive, meaning that you can go in and interactively decide what gets included in what not, and the type head Tilda 10. And what that says is take the last 10 commits, and allow me to pick and choose what I want to do with them and part of that rebase you can do a whole bunch of stuff, you can remove commits and whatnot. Most likely what you're going to do is You're either going to pee, pick them, or s squash them, you can pick one commit, or you can also like rename commits that way as well. But you can, you can pick one, and then squash the rest into that commit. And then when you make your pull request, it's all nice and tidy into a single big commit. And then that makes any history or like, you go back in a year, like, oh, who's working on this feature? It's just a nice tidy commit where everything's in one, some people don't like that. They say, just leave your history as you wrote it, right? Like you you intentionally committed at that time, then just leave those 10 commits in and that's fine. Other people say, No, always make one commit per poll request. That's interesting. I've always just been like, you know, I don't necessarily care if the commit log is that tidy. Yeah, as long as it explains what's actually taking place within the changes of the code. So that's, that's a interesting perspective. To hear like that there is like a, a world where people need the tiniest, tiniest commits in everything interesting. So if you committed some code to your site, and it broke your site, then you want to use century now, I'm talking about century etc.io century is the perfect error and Exception Handling service that tells you all sorts of great information about the errors that are happening on your code. And let me tell you, it's very, very nice. In fact, it related to this, if we wanted to potentially have an issue that was brought in in the specific commit, we actually have access to see what commit brought in that error, writing your century dashboard, right in your century dashboard. And then you can write directly from there, click another button and get it to great and open an issue where you can tag the relevant parties to whatever may have committed that error. So you're gonna want to check out century century.io, and use the coupon code tasty treat all lowercase all one word, and you will get two months for free. So check it out. century.io. All right. Next question is from Fernando Saavedra. Hey, folks, I'm a big fan of syntax. I listened to new episodes as soon as they're Thank you, Fernando. I have a question for Wes. Oh, okay. What am I What am I Fernando here? Okay.

22
00:27:13,620 --> 00:27:27,540
Unknown: You can answer this too, I think how do you handle captioning and transcripts for your courses? Do you use some tool or service for that? Are you do you do it by hand in the West? though? I'm gonna I'm going to make you answer this one because I was not addressed in the question.

23
00:27:28,530 --> 00:29:48,660
Wes Bos: I have used several different captioning services in the past, and I have landed on rev r e v.com. To be the one so the way that it works is that integrates right into my Vimeo, you log into rev you select all the Vimeo videos, oh, wow, you you order them, it's a buck 25 US per minute. So it's not cheap. It costs usually thousands of dollars to caption each of my courses. But I pretty sure that that pays off entirely based on Deaf users taking my courses, like I get a lot of actual deaf people taking my courses, which is which is awesome to see. And they also like, keep me like, it's not just like some generated transcripts and whatnot and stuff like that, like like it like it's actual people that are going in there. And the way I think that it works, because it's getting faster and faster. It used to take about a week to get my transcripts back. And now it takes me usually 24 hours, I have the transcripts back and I think that's because the machine learning transcripts along with you give it a dictionary of words that you often say. So all I'll give it a dictionary of how to how to like NPM, lowercase react dot j, s spelt capital R. And I'll give it just a huge list of like technical words that I'm saying that are not English words. And that will take it into account, add them to the dictionary as they're generated. And I think what happens is that they, they get it 90 95% of the way there with computers, and then they have an actual person, go through it, and transcribe it and make sure that everything looks good. And I'm super impressed at the quality of it. And even even things like a capitals on component names are almost always correct. I do have them up on GitHub. And people do submit little fixes here and there because it's not 100% perfect, but it is very, very, very good. That's how I do it. They they publish them right to Vimeo. And then if there is an edit to one of my videos, I can either try to update that file myself if it's simply as I got a caption done for a couple of videos and I forgot to put the five second bumper on the front of each of them. So I use this VS code extension and it just bumps all the captions five seconds, which is amazing. Wow,

24
00:29:48,660 --> 00:30:14,850
that's it. I was wondering how you do that with the time stamps. Yeah, yeah, it's it's great and they have a whole editor and rev as well. If I make more than like a minute or two worth of it, even if I if I attend second thing In the middle of it, I just reorder the captions for it because it's too, too much work to try to push them over and whatnot. Yeah, interesting. Yeah, they're their websites really nice too, has a neat little school of striped design kind of deal.

25
00:30:15,060 --> 00:31:07,140
That looks very nice. Luckily, like I can afford to do it for my courses, because I don't I don't put out a course every week or whatever, and have enough people but buying it. But it's definitely something I would like to see on even on this podcast. Like I'm curious. Every now every couple of months, I come back to the computer generated transcripts. And I think they're probably almost at a point now, where we can probably just computer generate this syntax transcripts. We've never done captions and stuff for the podcast, just because it would be expensive. And also it would be it's a lot of overhead to our workflow in our process, especially when it was taking a week to get the captions done. When sometimes we only have like 12 hours between when the podcast is edited and when it when it's live. But I'm wondering if we can like work that in somehow into like a publish cycle, where the computer just generates all the transcripts for us.

26
00:31:07,200 --> 00:31:22,560
Scott Tolinski: I think that's a really interesting idea. And I think it's something we should probably get on. Next question is from Mike. Hey, Scott, and Wes, your show totally roles. Oh, I'm a recent graduate of By the way, we only pick questions that compliment us in the first sentence of they all day they all

27
00:31:22,800 --> 00:33:16,890
Wes Bos: start with I love a big fan. Right, this lesson unintentional, I assure you, it was not intentional. I am a recent graduate of a code school that focused on Ruby on Rails, the company I work at currently uses Angular for part of their react and rails. Oh, I'm so used to saying Ruby and Rails, I saw R and R and I, my brain autocompleted to Ruby and Rails, well focused on react and rails. And the company that I currently work for uses Angular as part of their stack, I would eventually like to move into a dev spot, but I'm finding Angular feels a bit stuffy. And I'm not as excited about it as I am react view spelt etc. I am afraid that if I dive into Angular, I will become less relevant down the road. And I want to learn everything. But I only have so much time and I don't want to stop my growth as a developer. Any thoughts on this would be sick. Cheers. Okay, so check it out. Angular, super relevant, super used throughout the entire industry. So by using Angular, learning Angular being good at Angular, you will not be losing any relevancy, you can definitely learn quite a bit about modern front end development as you use Angular, because a lot of these systems are all very, very similar in the way they handle things, such as just being generally components, Lego pieces that you plug in whatever. Wes and I are not an Angular developer. So you're not going to hear us go on and on about Angular, I have used Angular in the past version 1.3. But I know they're on a very high version now. And 60, or Angular version 60. But the people that use Angular tend to like it. I don't think using Angular is like a boon to your career, in any sort of way. I think. If your team uses Angular dive in become Angular, I really think it's, it's totally not only is it totally fine, but Angular, you know, it's a totally good world to be in.

28
00:33:17,490 --> 00:33:39,390
Unknown: Yeah, we get this question all the time. And with a lot of tech, and I think we need to make it very clear. Just because we don't use it doesn't mean we don't like it, it's because we don't use it. Scott, and I have our stacks and we like to use those stacks. And of course, we try different stuff every now and then. But at the end of the day, maybe Scott Canva I'm not switching stacks every single day.

29
00:33:40,410 --> 00:34:11,130
Wes Bos: stacks don't I mean, okay, so I do with probably have a bit of a reputation as a switcher of stacks and stacks which are but let's be clear, the level of tutorial site has been built in react from almost day one. So like I you know, I'm as much as I talk about spelt, and I like spelt, whatever, moving our entire code base to smelt or anything else, for that matter would be absolutely no fun. And certainly not something I'm interested in doing. So it's not worth it. It's not worth it. At the end of the day, I am practical enough to realize when you shouldn't Yeah.

30
00:34:11,670 --> 00:35:01,400
And at the end of the day, you're a JavaScript developer, you should be able to jump from thing to thing, obviously, you're not going to immediately go from three years in Angular to react, but like a guarantee, all of the money in the world that someone who is amazing at Angular would be able to go through the React docs, and in like, four, four and a half days, take half day off on Friday can get really good at at Angular, right? Like, why because that person is probably a very good JavaScript developer, and the fact that they use different types of templates and different hooks and stuff. At the end of the day, this stuff is just JavaScript in the browser. So you need to remember that Angular gets such a bad rap, I think. I hope we don't contribute to that because I don't intentionally contribute to that.

31
00:35:01,880 --> 00:36:16,020
I hope I don't write. Right like, like, sometimes we make English jokes and stuff like that. But like, again, it doesn't doesn't really matter, especially like, it sounds like you're at a job that already has an opening for you to transition into a web development role. That sounds amazing. You don't have to switch jobs. They already have a stack. Go for it. Yeah. Also, one more thing, one more thing. I missed that. Yeah, one more thing to play with see this all the time, in the bootcamp where we would learn at the time it was we would learn HTML, CSS, and people would just type their HTML straightaway and then know a little bit of JavaScript. And then we'd introduce them, WordPress. And then they would be frustrated because they couldn't just edit the HTML directly. And they would say, I hate WordPress and was like, You have been a web developer for three weeks. You don't hate WordPress, you have you have no ability to to go into this like you can. You can, like make this amazing revelation about tacking coding and stuff like that. You just don't like it because it's different. And it's not what you know. And of course, you might not like it at the end of the day, because you get into it. But you're not at a point right now where you can you can make that sweeping generalization about web tech.

32
00:36:16,020 --> 00:36:16,980
Unknown: Yeah. Well, and

33
00:36:16,980 --> 00:39:11,400
Wes Bos: let me just say this to the only way I'm going to be like, Listen, I am feeling that relevant is if the the place came with a stack that was like we're using mootools. And whatever. Like, at that point, I might say, okay, maybe I want to learn Yeah, I'm a little bit more modern here. Modern. Yeah. But Angular. Yeah. No sweat there. Okay. Next question is from Joel, how do you handle svgs. In react, I know SVG are exists. I do not know that exists personally. But I'd like to avoid adding another dependency. If it's something I can roll on my own. In the past, I've created functions that take parameters like fill or stroke or control color, return a string of the SVG code with the arguments interpolated in, then I place that string into a component using dangerously set inner HTML. I haven't seen this method before used anywhere else, not because it's bad. And probably because it's not the best practice. But it also works. So maybe I am fine. Okay, here's what I do. Listen, SVG is in react in terms of like, inline, SVG is there not a lot of fun. There's several different ways you can there's definitely a, I don't know about SVG or i'm not i'm not sure what that is. But like, there are definitely ones where you can import a SVG path, and then your build tool will then actually inline it or a react component that will inline it, you can reference it like an image and have it inline it No problem. But I personally, here's what we do, we have a react component that is a standard react component that all it is is a switch statement. And the switch statement takes a string of a name. And that name is the icon name. Now you don't need to have an spgb, dangerously set inner HTML, and you don't have to have it be a string. svg is just a valid valid react code. So you can just have a straight up SVG returned from a react component with no modifications to it, beyond the changing of view, ifunbox to view camel case box and things like that, for whatever reason, React doesn't like our normal data attributes. So I do that. And then I have things like accent, or color as props. And I just have a anytime I need to add an icon, I just add it to the switch statement with a string. We audit it from time to time, but it gives me full control over how the icons are I also have a size property that determines the size of the icon. If I need to do that style prop in case I just want to pass any CSS to it. So like I said, it's basically just a switch statement that takes in a name for a string and outputs, the SVG as an SVG, this gives us full control over everything. And it's pretty maintainable. Just like I said, add a new, add a new icon, you just paste into the switch statement, you need to replace one you just paste over the one that's there and whatever. And for us, it's worked very well, I've always done it this way. And it has never really led me astray. So this is this is the way that I approach.

34
00:39:11,730 --> 00:39:45,810
Unknown: In the past. I've used SVG R, which Scott mentioned, you can use it as a web pack plugin, meaning that anytime you import an SVG, straight from your react component, it will do all of that all those hoops and whatnot to get from SVG into a into a proper react component. And then also, there's just like a little thing online where if you just got one or two svgs just paste it into this little box and it will kick out the React equivalent code, copy, paste, put it in a component, Bob's your uncle, copy, paste put

35
00:39:45,810 --> 00:40:43,080
Wes Bos: in the component that sounds like like a nursery rhyme to the kids like alright, question is from Jordan white. What social media platforms do you use as a dev and what is cool to have what ones are Are there and what are their benefits? Social media burn at all? No, I, I say this is somebody who you is like, completely obsessed with using Instagram and Reddit for the most part. So your mileage will vary. I personally don't learn anything off of social media, unless it's a news aggregate like Reddit, like Reddit, or maybe Hacker News occasionally. But for me personally, as a dev, I don't think any of these things are required beyond like being the de facto user experiences that many people are, are running into. And you know, me, potentially the things that I'm learning from social media are like how, how an app that is used by millions of people should look and function and work.

36
00:40:43,080 --> 00:43:08,040
So yeah, I'm gonna I'm very rarely disagree with you. I'm gonna say social media is pretty, it's not required, but it's pretty important. Yeah, well, I guess what I'm saying is, is that like, it depends on what you're trying to do here. Like, are you trying to grow a personality? Are you trying to grow? Like a, your reputation? Are you trying to have like a foot in the sand? Like, I don't know. Yeah, no, like, not not for like somebody like me, or obviously, I need to market my courses and whatnot. Like, if just a regular dev who wants to be a good web developer and work at a company? Do you need social media for that? Probably not. But that's how I stay up to date. That's how I stay in tune with what's going on is that you follow all of these different people in the word vomit has this sort of like awful side, benefit to it or not? Not? Awful. It's not a benefit. This awful side part where like, often people are very rude. on social media, there's a lot of toxic, you get a lot of like awful politics get mixed in with the web development stuff. So there's that and it's distracting and can take away from your job. But there still is, at least my opinion is still has a lot of upside to that type of them. So can I jump in here real quick? I embarrassingly enough forgot that Twitter is included in social media. Because you're right, I learned a mammoth ton from Twitter and the people I follow on Twitter. And as we say this, one of the few tabs that I don't close is my Tweet Deck. So like, you could ignore everything that I've said about this that because I just didn't think about Twitter. Yeah, maybe people just associate I was just thinking Facebook, social media with the awful ones. Yeah, tick tock, Facebook for developers. Let's go through them really quickly. Facebook for developers. I have a Facebook page. And I find that the people that comment on it are much more of an international audience. So I'm not sure if that's the thing or not, but I certainly do not enjoy Facebook. Except for marketplace. I love Facebook marketplace need to sell my car. Maybe I should dive into marketplace. Do you get people are flaky and marketplace? And yeah, oh my gosh, I've been trying to give away a piece of drywall. Yeah. Which is like, like it for free. Yeah. And I've had like 30 people be like, Hey, is this still available? And I immediately say yes. And then then you never hear from them ever again. So

37
00:43:08,100 --> 00:43:32,190
Scott Tolinski: either that or they're like, they're they asked the dumbest question. Like Courtney was trying to sell this like IKEA desk that she bought for like, you know, maybe 100 bucks. We're trying to sell it for 20. Yes, huge mark down because nobody's taking it. So we're just like, here. Here is this desk, please take this desk. Yeah, here's the model number. Here's 800 photos of it, whatever. And then the questions come in. They're like, Excuse me, could you tell me the exact depth of the desk? And oh, my gosh,

38
00:43:33,480 --> 00:43:35,630
Unknown: how could you possibly not look that up?

39
00:43:35,960 --> 00:43:41,010
just Google it. And then she'll look it up. She'll tell them and then never hear from them again.

40
00:43:41,040 --> 00:44:49,770
Wes Bos: I know people are I'm such a good Facebook marketplace. Because I always tell people Hey, I'm gonna go check. I'll get back to you. But there's some awful awful people on on Facebook marketplace. That's I think it's something Facebook is trying to fix. Because if you don't reply to somebody, they'll follow up with a Hey, are you still interested in it? But it's hard to fix just humanity being awful. Anyways, Facebook Yeah, developer i don't i don't think so. I don't think that's a good spot. Reddit is a can be a good place for it. It's not somewhere that I hang out a ton. I subscribe to a couple of web devs. And I see that stuff. Come through every now and then. I think our JavaScript, our web dev, our learn programming, our learn JavaScript, those are all good ones to sort of get into there's platforms like what is the dev platform called? dev.to dev.to Yeah, dev.co that's that seems to be a pretty pretty good community. Lots of articles very very dev focused. So that one seems like a good one Free Code Camp has forums seems to be a good place to spend your time discord discord? Yeah. Oh, that

41
00:44:49,770 --> 00:45:08,970
sounds good. Sure. Never. Yeah, level up tutorials. discord is kickin with people helping each other and sharing stuff all the time. Yeah, that discord is a really good one. I don't think it's developer Instagram is odd. I think it can be can be a good place. If you're looking for like, motivation, like thoughts, I

42
00:45:08,970 --> 00:45:42,330
guess. Yeah, yeah, there's, there's a lot of like, really like, copy and pasted. Like, you know, 10 get tips there. Like I saw one the other day it was like, it was like 100 node packages you need to know, it's like, what, what, like, I'm not gonna go through 100 like your list of 100 node packages, and that will just be like, like, date FNS. But then moment j like it's like, as soon as they clearly like looked at the list that was like 100 most downloaded ones and turned it into an image. There's there's some stuff like that you got to wade through some some serious copy and paste garbage, I think.

43
00:45:42,510 --> 00:46:50,640
And on the flip side, there's a lot of like, Instagram developers who, like I don't know if they code or not, but they post lots of photos. of like, the lifestyle that's associated with with coding, which like, like, I'm all about, like, I love a beautiful monitor and sipping a coffee with my code screen open as much as everybody else. But it's funny that there's like, there's there's people that have hundreds of thousands of followers, and never post anything about actual coding. Like they never talk about what a closure. Yeah. 10 closures to know. Yeah, yeah. But I don't know, it just I think it's just the the nature of the platform is very visual, and much more about the lifestyle and whatnot. So yeah, I think those are some things to think about social media. If you are a developer, yes, sorry, super derailed. And social media is a place where you can really lose your sanity if you you know, you know, prune your garden enough. So with more about our sponsor, this, this, this episode is us talking about Sanity.

44
00:46:50,940 --> 00:48:17,010
Alright, so Sanity, you know, by now structure content, CMS, it spits out a API, you get this really cool CMS where you can log in and create your content types. And then you also can edit and add all the content, you know about that. But there's some new features to Sanity that we're gonna cover right now. First one is called presence. And this is really cool, because like we talked earlier about, like the client, having access to the CMS and Sanity is an awesome CMS for giving to your client, they just introducing this thing called presence, which will show you when somebody else is currently editing one of the fields or one of your data types. So it's like, almost like you know, Google Docs, you can see where, who's editing what and whatnot. This will put a little picture of who's editing that field above the field. So pretty, pretty cool. Also, I want to shout out another thing that they did is sanity.io forward slash create. And they have a whole bunch of different starters for things like Gatsby with Netlify, next jass with Netlify. I know they're gonna roll out a bunch of ones with versal and next .js as well, pretty soon, so make sure you stay glued to Sanity dial forward slash create. So if you want to check out Sanity, go to sanity.io forward slash syntax that's going to get you double the free usage tier. Thanks so much to Sanity for sponsoring. Thank you. Next question is from a chick Harith.

45
00:48:17,010 --> 00:48:17,550
Unknown: Ah Hey, guys.

46
00:48:17,550 --> 00:48:49,770
Thanks for an amazing podcast. Another shirt question. Have you tried an ultra wide monitor for coding such as a 34 or 38 inches, I feel the extra width would be great for a single monitor setup but haven't been able to see one live where I live. Let me tell you, I have a 38 inches monitor. That is fantastic. And I absolutely love it. And let me tell you, it is very impressive to look at this. So if you haven't seen one live, don't worry when you plug it in and you turn it on for the first time.

47
00:48:49,800 --> 00:48:51,030
You will not regret it.

48
00:48:51,120 --> 00:51:17,370
Wes Bos: Yeah, 34 or 38 inches, it is a sight to behold I mean, I I remember getting my first 24 inches monitor and thinking this is the largest thing I've ever seen in my entire life. Let me tell you, these 38 ultra wide monitors are very, very good. And the cool thing about it is like being able to have you know multiple code tabs and your website and developer tools open all the same time on one monitor is just nothing can be that I'm the type that struggles with like once I get everything on my 15 inch turn to get it all in the place where like I'm not just tabbing constantly between 100 different windows. Yeah, there's nothing better than being able to see it. I just like I almost bought an ultra wide the other day because I have a I have a 32 inch 4k and I left it at the cottage in my office there and I came home I was like I need a new monitor for home now. And I almost went with the 38 inch but I ended up just for resolution reasons going with another 4k display but like the minute there's an affordable, ultra wide that has a higher than 1440 resolution. I'm all over it because I'm so jealous and Scott's like being able to have it because I have two monitors. But like there's a huge bezel in between them, and you have to angle them at the right thing. But having a nice curved display is my dream. Yeah, curved, ultra wide. Definitely recommend. Cool. So this is the part of the show where we talk about sick pics things that we have found to be sick. The reason why I decided to, like pick these things, and the fact that I was doing the dishes last night, and I was thinking, Man, I wonder if other people know about these tools that they have for doing their dishes that I love so much. So I have three tools, or doing the dishes that I am. I'll have links to in the show notes, so you can imagine them or seeing them. But Wes, I'm gonna be interested to know if you have any of these products, okay, they're all really super cheap one is a knife cleaner, which is so I don't know how you wash your knives. But I've always like took in a scrub daddy and I got to do the edges and the other edges. And then knowing me I'm such a spaz that at one point, I'm sure I'm gonna slice my hand open at some point. So I got this neat little thing that is a knife cleaner, which is basically like a C shape that has scrubbies on both sides. And you can just sort of slide your hand up and down the knife to clean it and it scrubs it really well without any any possibility of you cutting yourself. So this is number one.

49
00:51:17,370 --> 00:52:12,330
Is this knife cleaner? Wes, what do you use for cleaning knives? Oh, man, I I love this question because it's gonna trigger some people. So I have very nice knives and I've very nice sharpening equipment. And I put them in the dishwasher because I don't have time to clean them. This is so much faster. This is faster than is it but I just throw them right in the dishwasher which you're not supposed to do with nice knives because apparently surprised ruins them. Yeah, but I don't care. I just throw them in. I sharpen them really well all time and they work amazingly. That's Yeah, I guess for you because you do obsessively sharpen them where I don't necessarily. I don't necessarily do that. I mean, I sharpen them, but probably not as much as you are nice. Oh yeah. I don't know if the dishwasher makes them less sharp. It is supposed to dull them. Yeah, it is. Really I don't have the like the steel ones. The accurate rust minor still stainless at the end of the day, but still, I don't I just Yeah, I just sharpen them.

50
00:52:13,110 --> 00:52:40,860
Okay, so that's number one. Number Number two is this really neat scraper like a plate scraper. And it's like a plastic plate scraper that really just is a piece of plastic on one end to allow you to scrape things off of plates like food, whatever Geez, so you don't get it all cut out your scrub daddy got one of these. And then the other corner of it is like, it looks like teeth were grooves in between like a skillet plate or a skillet pan so

51
00:52:40,860 --> 00:53:34,410
you could scrub that pan as well. And then the last one that I'm going to be sick pick so three kitchen things is a chain. It's like a chainmail scrubber for your cast iron pans. Oh yeah, that's that's key as well because you shouldn't be using soap on those types of things. And so yeah, and cast iron can sometimes get grimy gastheren can get grimy and maybe you got some stuff stuck on there. And so this is basically looks like a little chainmail It looks like a chainmail towel. Again, obdlink style this stuff looks like a little chainmail towel that way here. And get any of that that hard to get stuff off there without rooting for a sponge or anything like that. Yeah, those those little scrapers are so handy. Even very bright. So looking and things like that. Yeah, being able to pull something off. It's sort of on the same I'm gonna post pick you right now and plastic razor blade scraper. Yes.

52
00:53:34,440 --> 00:53:52,230
Yeah. So I have one that is half of it. One end is a plastic razor blade and the other half is an actual razor blade. So you can use the blade on the stovetop if you have a stovetop or the the granite or something like that. You can use the plus yeah or sticker you get like a sticker on something you need to scrape it off. Oh, yeah,

53
00:53:52,290 --> 00:54:15,330
I used that for gas. Like I had to take an old gasket off of exhaust intake or off a carb on my thing. And I was like oh plastic because you can't like mar the surface. So I love those those. These are the my favorite sick pics because they're just like $5 thing. Yeah, Scots are so handy. That's cheap cleaning utensils. I'll have a whole little list of them here in the show notes.

54
00:54:16,590 --> 00:56:09,360
Awesome. I'm going to sick pick an iPhone app called scriptable app. So iOS 14 came out like a week ago. And they announced widgets. And I was like awesome love widgets. I want to make my own. And I was like, can you like is there like some sort of iframe I could make where I could just like iframe a website in and upload my widget in JavaScript. And you can't, but I found this app called scriptable app. And they allow you to do JavaScript automations. And one of the features that just rolled out is the ability to make widgets in JavaScript. So you can't use CSS or HTML, but you can use their own API that I'm assume converts to native and it was great because I If I wrote a little widget that fetched my like my sales numbers for the day and really mean and displayed them right on it, so I don't have to, the way I would check my sales previously is they have like a little shortcut. And it would go and refresh the page and show me them. But now, I just have to look at my homescreen. And it fetches them. I'm not sure how often, but every time I look at it, it's been fetched within the last couple of minutes. And it was really easy, it probably took me about half an hour to write this little widget and get up and running. That sounds fantastic. That sounds like something I got to do. The workflow for it was a little bit weird, because you can't you have to code it on the phone. So what I did, I ended up just like coding it on my computer, copying it and then I use Shared Clipboard, so it would be in the clipboard on the phone. And then I just paste it in. And other people said you can put the file, the scriptable file in your iCloud. And then if you edit it on your computer, it will sync it with the one on your phone. It's not the best workflow and there's no there's no development workflow. So every time you want to test something, you got to save it and whatnot, but it's it's really slick. I was really happy to find it.

55
00:56:09,750 --> 00:56:48,330
Interesting. Yeah, I've seen this around the internet on the social media, believe it or not. But yeah, that looks really cool. Got it. I gotta check this out. All right, a shameless plugs. I'm gonna shamelessly plug my master gatsby.com course this is the course that will teach you the JavaScript and the CSS and everything that you need to learn to build a modern web site with Gatsby react graph. qL headless CMS hannity actually one of our sponsors today, progressive images, scoping, your CSS serverless, functions, all of that good stuff, check it out, Master Gatsby calm and use coupon code syntax for 10 bucks off sick,

56
00:56:48,330 --> 00:57:20,670
Scott Tolinski: I'm going to shamelessly plug my latest course, which is going to be react j s. for everyone. What I did is I took some of all of the things that I've learned about react over the years. And we've had this is like now my fourth version of doing a react for beginners course. And instead of updating like, let's do a whole new course, because so much has changed. And while we have the old course that teaches the class components and all that stuff is still valid. We're going to be releasing a brand new course that is react with hooks from the very beginning in terms of like, you want to learn react.

57
00:57:20,670 --> 00:57:50,250
Wes Bos: Here's step one, let's write a function component. Right, let's, let's talk about these things as they are now not as they were whatever. So level up tutorials.com forward slash Pro. If you have been holding off learning react, this is the best time to do it. And this course will teach you everything you need to know to get up and running. Alright, thanks so much for tuning in. Hopefully you enjoyed that one. Make sure you submit your questions at syntax RFM and we will catch you on Monday. Yes, and be sure to tell us how much you enjoyed it at the beginning of each question

58
00:57:51,390 --> 00:57:52,020
Unknown: your question

59
00:57:54,510 --> 00:57:55,230
space.

60
00:57:57,090 --> 00:58:06,810
Head on over to syntax.fm for a full archive of all of our shows. And don't forget to subscribe in your podcast player or drop a review if you like this show.

